{
    // All these settings have been taken from the clang-format manual,
    // and can be customised form within Sublime Text settings files.
    // Take a look at http://clang.llvm.org/docs/ClangFormatStyleOptions.html
    // for examples.

    // The style used for all options not specifically set in the configuration.
    // Possible values:
    // 
    // LLVM
    // Google
    // Chromium
    // Mozilla
    // WebKit
    "BasedOnStyle": "LLVM",
    
    // The extra indent or outdent of access modifiers, e.g. "public":.
    "AccessModifierOffset": -4,

    // If true, horizontally aligns arguments after an open bracket.
    // This applies to round brackets (parentheses), angle brackets and square
    // brackets.
    // Possible values:
    // 
    // Align: Align parameters on the open bracket, e.g.:
    // someLongFunction(argument1,
    //                  argument2);
    // 
    // DontAlign: Don’t align, instead use ContinuationIndentWidth, e.g.:
    // someLongFunction(argument1,
    //     argument2);
    // 
    // AlwaysBreak: Always break after an open bracket, if the parameters don’t
    // fit on a single line, e.g.:
    // someLongFunction(
    //     argument1, argument2);
    "AlignAfterOpenBracket": "DontAlign",

    // If true, aligns consecutive assignments.
    // This will align the assignment operators of consecutive lines.
    // This will result in formattings like:
    //     int aaaa = 12;
    //     int b    = 23;
    //     int ccc  = 23;
    "AlignConsecutiveAssignments": false,

    // If true, aligns consecutive declarations.
    // This will align the declaration names of consecutive lines. This will
    // result in formattings like:
    // int         aaaa = 12;
    // float       b = 23;
    // std::string ccc = 23;
   "AlignConsecutiveDeclarations": false,

    // If true, aligns escaped newlines as far left as possible. Otherwise puts
    // them into the right-most column.
    "AlignEscapedNewlinesLeft": false,

    // If true, horizontally align operands of binary and ternary expressions.
    // Specifically, this aligns operands of a single expression that needs to
    // be split over multiple lines.
    "AlignOperands": false,   

    // If true, aligns trailing comments.
    "AlignTrailingComments": true,

    // Allow putting all parameters of a function declaration onto the next line
    // even if BinPackParameters is false.
    "AllowAllParametersOfDeclarationOnNextLine": true,

    // Allows contracting simple braced statements to a single line.
    // E.g., this allows if (a) { return; } to be put on a single line.
    "AllowShortBlocksOnASingleLine": false,

    // If true, short case labels will be contracted to a single line.
    "AllowShortCaseLabelsOnASingleLine": false,

    // Dependent on the value, int f() { return 0; } can be put on a single
    // line.
    // Possible values:
    // 
    // None: Never merge functions into a single line.    
    // Empty: Only merge empty functions.
    // Inline: Only merge functions defined inside a class.
    // All: Merge all functions fitting on a single line.
    "AllowShortFunctionsOnASingleLine": "None",

    // If true, if (a) return; can be put on a single line.
    "AllowShortIfStatementsOnASingleLine": false,

    // If true, while (true) continue; can be put on a single line.
    "AllowShortLoopsOnASingleLine": false,

    // The function definition return type breaking style to use.
    // Possible values:
    // 
    // None: Break after return type automatically.
    //       PenaltyReturnTypeOnItsOwnLine is taken into account.
    // All: Always break after the return type.
    // TopLevel: Always break after the return types of top level functions.
    "AlwaysBreakAfterDefinitionReturnType": "None",

    // The function declaration return type breaking style to use.
    // Possible values:
    // 
    // None: Break after return type automatically.
    //       PenaltyReturnTypeOnItsOwnLine is taken into account.
    // All: Always break after the return type.
    // TopLevel: Always break after the return types of top-level functions.
    // AllDefinitions: Always break after the return type of function
    //                 definitions.
    // TopLevelDefinitions: Always break after the return type of top-level
    //                      definitions.
    "AlwaysBreakAfterReturnType": "None",

    // If true, always break before multiline string literals.
    // This flag is mean to make cases where there are multiple multiline 
    // strings in a file look more consistent. Thus, it will only take effect 
    // if wrapping the string at that point leads to it being indented 
    // ContinuationIndentWidth spaces from the start of the line.
    "AlwaysBreakBeforeMultilineStrings": false,

    // If true, always break after the template<...> of a template declaration.
    "AlwaysBreakTemplateDeclarations": true,

    // If false, a function call’s arguments will either be all on the same line
    // or will have one line each.
    "BinPackArguments": true,

    // If false, a function call’s or function definition’s parameters will
    // either all be on the same line or will have one line each.
    "BinPackParameters": true,

    // Control of individual brace wrapping cases.
    // If BreakBeforeBraces is set to custom, use this to specify how each
    // individual brace case should be handled. Otherwise, this is ignored
    // Nested configuration flags:
    // 
    // bool AfterClass: Wrap class definitions.
    // bool AfterControlStatement: Wrap control statements (if/for/while/..).
    // bool AfterEnum: Wrap enum definitions.
    // bool AfterFunction: Wrap function definitions.
    // bool AfterNamespace: Wrap namespace definitions.
    // bool AfterObjCDeclaration: Wrap ObjC definitions.
    // bool AfterStruct: Wrap struct definitions.
    // bool AfterUnion: Wrap union definitions.
    // bool BeforeCatch: Wrap before catch.
    // bool BeforeElse: Wrap before else.
    // bool IndentBraces: Indent the wrapped braces themselves.
    "BraceWrapping": "{AfterClass: true, AfterEnum: true, AfterObjCDeclaration: true, AfterStruct: true, AfterUnion: true}",

    // Break after each annotation on a field in Java files.
// 4.0: "BreakAfterJavaFieldAnnotations": true,

    // The way to wrap binary operators.
    // Possible values:
    // 
    // None: Break after operators.
    // NonAssignment: Break before operators that aren’t assignments.
    // All: Break before operators.
    "BreakBeforeBinaryOperators": "None",

    // The brace breaking style to use.
    // Possible values:
    // 
    // Attach: Always attach braces to surrounding context.
    // Linux: Like Attach, but break before braces on function, namespace and
    //        class definitions.
    // Mozilla: Like Attach, but break before braces on enum, function, and
    //          record definitions.
    // Stroustrup: Like Attach, but break before function definitions.
    // Allman: Always break before braces.
    // GNU: Always break before braces and add an extra level of indentation to
    //      braces of control statements, not to those of class, function or
    //      other definitions.
    // WebKit: Like Attach, but break before functions.
    // Custom: Configure each individual brace in BraceWrapping.
    "BreakBeforeBraces": "Custom",

    // If true, ternary operators will be placed after line breaks.
    "BreakBeforeTernaryOperators": false,

    // Always break constructor initializers before commas and align the commas
    // with the colon.
    "BreakConstructorInitializersBeforeComma": false,

    // The column limit. A column limit of 0 means that there is no column
    // limit. In this case, clang-format will respect the input’s line breaking
    // decisions within statements unless they contradict other rules.
    "ColumnLimit": 80,

    // A regular expression that describes comments with special meaning, which
    // should not be split into lines or otherwise changed.
    "CommentPragmas": "'^ IWYU pragma:'",

    // If the constructor initializers don’t fit on a line, put each initializer
    // on its own line.
    "ConstructorInitializerAllOnOneLineOrOnePerLine": false,

    // The number of characters to use for indentation of constructor
    // initializer lists.
    "ConstructorInitializerIndentWidth": 8,

    // Indent width for line continuations.
    "ContinuationIndentWidth": 8,

    // If true, format braced lists as best suited for C++11 braced lists.
    // Important "differences": - No spaces inside the braced list. - No line
    // break before the closing brace. - Indentation with the continuation
    // indent, not with the block indent. Fundamentally, C++11 braced lists are
    // formatted exactly like function calls would be formatted in their place.
    // If the braced list follows a name (e.g. a type or variable name), clang-
    // format formats as if the {} were the parentheses of a function call with
    // that name. If there is no name, a zero-length name is assumed.
    "Cpp11BracedListStyle": true,

    // If true, analyze the formatted file for the most common alignment of 
    // & and *. PointerAlignment is then used only as fallback.
    "DerivePointerAlignment": true,

    // Disables formatting completely.
    "DisableFormat": false,

    // A vector of macros that should be interpreted as foreach loops instead of
    // as function calls. These are expected to be macros of the "form":
    // FOREACH(<variable-declaration>, ...)
    // <loop-body>
    // In the .clang-format configuration file, this can be configured like:
    // ForEachMacros: ['RANGES_FOR', 'FOREACH']
    // For example: BOOST_FOREACH.
//  "ForEachMacros": "['RANGES_FOR', 'FOREACH']",

    // Regular expressions denoting the different #include categories used for 
    // ordering #includes.
    // These regular expressions are matched against the filename of an include
    // (including the <> or “”) in order. The value belonging to the first 
    // matching regular expression is assigned and #includes are sorted first 
    // according to increasing category number and then alphabetically within 
    // each category.
    // If none of the regular expressions match, UINT_MAX is assigned as 
    // category. The main header for a source file automatically gets 
    // category 0, so that it is kept at the beginning of the 
    // #includes (http://llvm.org/docs/CodingStandards.html#include-style).
    // To configure this in the .clang-format file, use:
    // IncludeCategories:
    //   - Regex:           '^"(llvm|llvm-c|clang|clang-c)/'
    //     Priority:        2
    //   - Regex:           '^(<|"(gtest|isl|json)/)'
    //     Priority:        3
    //   - Regex:           '.\*'
    //     Priority:        1
//  "IncludeCategories": "UINT_MAX",

    // Specify a regular expression of suffixes that are allowed in the
    // file-to-main-include mapping.
    // When guessing whether a #include is the "main" include (to assign
    // category 0, see above), use this regex of allowed suffixes to the header
    // stem. A partial match is done, so that: "" means "arbitrary suffix";
    // "$" means "no suffix"
    // For example, if configured to "(_test)?$", then a header a.h would be
    // seen as the "main" include in both a.cc and a_test.cc.
// 4.0: "IncludeIsMainRegex": "'(_test)?$'",

    // Indent case labels one level from the switch statement. When false, use
    // the same indentation level as for the switch statement. Switch statement
    // body is always indented one level more than case labels.
    "IndentCaseLabels": true,

    // The number of columns to use for indentation.
    "IndentWidth": 4,

    // Indent if a function definition or declaration is wrapped after the type.
    "IndentWrappedFunctionNames": false,

    // The JavaScriptQuoteStyle to use for JavaScript strings.
    // Possible values:
    // 
    // Leave: Leave string quotes as they are.
    // Single: Always use single quotes.
    // Double: Always use double quotes.
// 4.0: "JavaScriptQuotes": "Leave",

    // If true, empty lines at the start of blocks are kept.
    "KeepEmptyLinesAtTheStartOfBlocks": false,

    // Language, this format style is targeted at.
    // Possible values:
    // 
    // None: Do not use.
    // Cpp: Should be used for C, C++, ObjectiveC, ObjectiveC++.
    // JavaScript: Should be used for JavaScript.
    // Proto: Should be used for Protocol Buffers
    //        (https://developers.google.com/protocol-buffers/). 
    "Language": "Cpp",

    // A regular expression matching macros that start a block.
//  "MacroBlockBegin": "*_MACRO_START",

    // A regular expression matching macros that end a block.
//  "MacroBlockEnd": "*_MACRO_END",

    // The maximum number of consecutive empty lines to keep.
    "MaxEmptyLinesToKeep": 2,

    // The indentation used for namespaces.
    // Possible values:
    // 
    // None: Don’t indent in namespaces.
    // Inner: Indent only in inner namespaces (nested in other namespaces).    
    // All: Indent in all namespaces.
    "NamespaceIndentation": "None",

    // The number of characters to use for indentation of ObjC blocks.
//  "ObjCBlockIndentWidth": 4,

    // Add a space after @property in Objective-C, i.e. use @property (readonly)
    // instead of @property(readonly).    
//  "ObjCSpaceAfterProperty": false,

    // Add a space in front of an Objective-C protocol list, i.e. use
    // Foo <Protocol> instead of Foo<Protocol>.    
//  "ObjCSpaceBeforeProtocolList": false,

    // The penalty for breaking a function call after “call(”.
    "PenaltyBreakBeforeFirstCallParameter": 19,

    // The penalty for each line break introduced inside a comment.
    "PenaltyBreakComment": 300,

    // The penalty for breaking before the first <<.
    "PenaltyBreakFirstLessLess": 120,

    // The penalty for each line break introduced inside a string literal.
    "PenaltyBreakString": 1000,

    // The penalty for each character outside of the column limit.
    "PenaltyExcessCharacter": 1000000,

    // Penalty for putting the return type of a function onto its own line.
    "PenaltyReturnTypeOnItsOwnLine": 60,

    // Pointer and reference alignment style.
    // Possible values:
    // 
    // Left: Align pointer to the left.
    // Right: Align pointer to the right.
    // Middle: Align pointer in the middle.
    "PointerAlignment": "Right",

    // If true, clang-format will attempt to re-flow comments.
    "ReflowComments": true,

    // If true, clang-format will sort #includes.
    "SortIncludes": true,

    // If true, a space may be inserted after C style casts.
    "SpaceAfterCStyleCast": false,

    // If false, spaces will be removed before assignment operators.
    "SpaceBeforeAssignmentOperators": true,

    // Defines in which cases to put a space before opening parentheses.
    // Possible values:
    // 
    // Never: Never put a space before opening parentheses.
    // ControlStatements: Put a space before opening parentheses only after
    //                    control statement keywords (for/if/while...).
    // Always: Always put a space before opening parentheses, except when it’s
    //         prohibited by the syntax rules (in function- like macro
    //         definitions) or when determined by other style rules (after unary
    //         operators, opening parentheses, etc.)    
    "SpaceBeforeParens": "Never",

    // If true, spaces may be inserted into ‘()’.
    "SpaceInEmptyParentheses": false,

    // The number of spaces before trailing line comments (//-comments). This
    // does not affect trailing block comments (/**/-comments) as those commonly
    // have different usage patterns and a number of special cases.
    "SpacesBeforeTrailingComments": 2,

    // If true, spaces will be inserted after ‘<’ and before ‘>’ in template
    // argument lists
    "SpacesInAngles": false,

    // If true, spaces may be inserted into C style casts.
    "SpacesInCStyleCastParentheses": false,

    // If true, spaces are inserted inside container literals (e.g. ObjC and
    // Javascript array and dict literals).    
    "SpacesInContainerLiterals": true,

    // If true, spaces will be inserted after ‘(‘ and before ‘)’.
    "SpacesInParentheses": false,

    // If true, spaces will be inserted after ‘[‘ and before ‘]’.
    "SpacesInSquareBrackets": false,

    // Format compatible with this standard, e.g. use A<A<int> > instead of
    // A<A<int>> for Cpp03.
    // Possible values:
    // 
    // Cpp03: Use C++03-compatible syntax.
    // Cpp11: Use features of C++11 (e.g. A<A<int>> instead of A<A<int> >).    
    // Auto: Automatic detection based on the input.
    "Standard": "Cpp11",

    // The number of columns used for tab stops.
    "TabWidth": 4,

    // The way to use tab characters in the resulting file.
    // Possible values:
    // 
    // Never: Never use tab.
    // ForIndentation: Use tabs only for indentation.
    // Always: Use tabs whenever we need to fill whitespace that spans at least
    //         from one tab stop to the next one.
    "UseTab": "Never"
}
